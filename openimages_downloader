{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"openimages_downloader","provenance":[],"collapsed_sections":[],"machine_shape":"hm","mount_file_id":"1vj-6AjEC65uSEAgotxLxNrFUAJT8QrS4","authorship_tag":"ABX9TyNg1cy9oh2OQEwFjJuH784p"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"fu-Ns9me0Nv9"},"source":["#inspired from https://github.com/EscVM/OIDv4_ToolKit/blob/master/modules/downloader.py\n","#TODO: fix mode negative, import annotations, remove is_depiction or is_occluded kind of things so images with only proper classes come out, limit inside imageid_of_classes so that program only processes till it reaches limit\n","import os\n","import pandas as pd\n","import numpy as np\n","from tqdm import tqdm\n","from multiprocessing.dummy import Pool as ThreadPool\n","from collections import Counter\n","import random\n","from pathlib import Path\n","\n","home_path = str(Path(__file__).absolute()).rstrip('openimages_downloader.py')\n","\n","print ('Loading CSVs')\n","train_annotations_df = pd.read_csv(home_path + \"openimages_csv/train-annotations-human-imagelabels.csv\")\n","print ('annotations csv loaded')\n","class_description_df = pd.read_csv(home_path + \"openimages_csv/class-descriptions.csv\")\n","print ('classes csv loaded')\n","\n","def imageid_of_classes(list_of_classes,mode):\n","    imageid = {}\n","    if mode == \"single\":\n","        imageid_with_duplicates = {}\n","        for name in list_of_classes:\n","            \n","            label = class_description_df.at[class_description_df[class_description_df['class_name'] == name].index[0],\"label\"]\n","            list_of_images = np.where(train_annotations_df[\"LabelName\"] == label)\n","            select_indices = list(list_of_images[0])\n","        #TODO: get code to remove is depiction and all\n","            imageid_with_duplicates[name]=list(set(train_annotations_df.iloc[select_indices, 0])) #set is to remove repeat mentions of same image for the same class\n","        #print (imageid_with_duplicates.items())\n","        return imageid_with_duplicates\n","        #we keep duplicates accross classes as its needed for counter in joint or all mode, its automatically removed by downloader\n","    elif mode == 'negative': #limit of 500 implemented\n","        imageid_single = imageid_of_classes(list_of_classes, \"single\")\n","        #removing imageids \n","        counter = 0\n","        while counter < 500:  #limit of 500 implemented HERE\n","          random_choice=random.choice(train_annotations_df[\"ImageID\"])\n","          if random_choice not in set([j for outer in imageid_single.values() for j in outer]) and random_choice not in set([j for outer in imageid.values() for j in outer]): \n","            imageid.setdefault(\"negative\",[]).append(random_choice)\n","            counter+=1\n","        return imageid\n","    elif mode == \"joint\":\n","        imageid_single = imageid_of_classes(list_of_classes, \"single\")\n","        # keeping only duplicates in 2 or more classes\n","        vals = Counter([j for outer in imageid_single.values() for j in outer])\n","        for key, values in imageid_single.items():\n","            for value in values:\n","                if vals[value] > 1 and value not in [j for outer in imageid.values() for j in outer]:\n","                    imageid.setdefault(key,[]).append(value)\n","        return imageid\n","\n","    elif mode == \"all\":\n","        imageid_single = imageid_of_classes(list_of_classes, \"single\")\n","        # keeping only duplicates in all classes\n","        vals = Counter([j for outer in imageid_single.values() for j in outer])\n","        for key, values in imageid_single.items():\n","            for value in values:\n","                if vals[value] == len(list_of_classes) and value not in [j for outer in imageid.values() for j in outer]:\n","                    imageid.setdefault(key,[]).append(value)\n","        return imageid\n","    else: return \"please enter single, joint or all mode\"\n","\n","def download_openimages(list_of_classses, mode, download_folder, limit):\n","  #calls function above to get imageids in a dict\n","  imageid_function_call = imageid_of_classes(list_of_classes, str(mode))\n","  #convert dict to list\n","  imageid_download = [j for outer in imageid_function_call.values() for j in outer]\n","  print (len(imageid_download))\n","  folder = 'train'\n","  download_dir = home_path + \"dataset/\" + str(download_folder) + '_openimages' + '/' \n","  try: \n","    os.mkdir(download_dir)\n","    print (\"openimages download directory created\")\n","  except: \n","    print ('openimages download directory exists')\n","  downloaded_images_list = [f.split('.')[0] for f in os.listdir(os.path.join(download_dir))]\n","  images_list_before_limit = list(set(imageid_download) - set(downloaded_images_list))\n","  images_list = images_list_before_limit [:limit]\n","  pool = ThreadPool(4)\n","\n","  if len(images_list) > 0:\n","      print('Download of {} images in {}.'.format(len(images_list), folder))\n","      commands = []\n","      for image in images_list:\n","          path = folder + '/' + str(image) + '.jpg ' + '\"' + download_dir + '\"'\n","          command = 'aws s3 --no-sign-request --only-show-errors cp s3://open-images-dataset/' + path\n","          commands.append(command)\n","\n","      list(tqdm(pool.imap(os.system, commands), total = len(commands) ))\n","\n","      print('Done!')\n","      pool.close()\n","      pool.join()\n","  else:\n","      print('All images already downloaded.')\n","\n","list_of_classes = [str(item) for item in input(\"Please input list of classes (eg, Ice cream,Butterfly,People): \").split(',')]\n","mode = input (\"Please input mode of download (choose single, joint or all mode): \")\n","download_folder = input (\"Please input name of download directory: \")\n","limit = int(input (\"Please input number of images to download: \"))\n","download_openimages(list_of_classes, mode, download_folder, limit)"],"execution_count":null,"outputs":[]}]}